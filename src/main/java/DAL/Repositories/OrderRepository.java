/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DAL.Repositories;

import DAL.DataAccessObject;
import Domain.Order;
import Domain.OrderCarport;
import Domain.OrderProductPart;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author azurwular
 */
public class OrderRepository
{
    /**
     * Creates an order to the database
     * @param order
     * @return
     * @throws SQLException
     * @throws NullPointerException 
     * @throws java.lang.ClassNotFoundException 
     */
    
    public void create(Order order) throws SQLException, NullPointerException, ClassNotFoundException 
    {
        // queries for inserting our entities
        String insertOrderSQL = "INSERT INTO orders (user_id) VALUES(?)";
        String insertOrderCarport = "INSERT INTO order_carports (order_id) VALUES(?)";
        String insertOrderProductPart = "INSERT INTO order_product_parts (order_carport_id, product_part_id, quantity, price) VALUES(?, ?, ?, ?)";
        
        Connection connection = DataAccessObject.getConnection();
        
        // Commit only when everything is created, rollback if something goes wrong
        // A transaction begins here
        connection.setAutoCommit(false);
        
        // first create the order and get its id
        try{
            PreparedStatement insertOrderStatement = connection.prepareStatement(insertOrderSQL, Statement.RETURN_GENERATED_KEYS);
            insertOrderStatement.setInt(1, order.getCustomer().getId());
            insertOrderStatement.executeUpdate();
        
            // Get autogenerated id of new order
            ResultSet orderResultSet = insertOrderStatement.getGeneratedKeys();
            orderResultSet.next();
            int newOrderId = orderResultSet.getInt(1);

            // then create all order carports and their parts
            for(OrderCarport orderCarport : order.getProducts())
            {
                // create the current carport; get its id and use it for its product parts
                PreparedStatement insertOrderCarportStatement = connection.prepareStatement(insertOrderCarport, Statement.RETURN_GENERATED_KEYS);
                insertOrderCarportStatement.setInt(1, newOrderId);
                insertOrderCarportStatement.executeUpdate();

                // Get newly autogenerated order carport id 
                ResultSet orderCarportResultSet = insertOrderCarportStatement.getGeneratedKeys();
                orderCarportResultSet.next();
                int newOrderCarportId = orderCarportResultSet.getInt(1);

                // create all order product parts in the order carport
                for(OrderProductPart orderProductPart : orderCarport.getProductParts())
                {
                    // create the current carport; get its id and use it for its product parts
                    PreparedStatement insertOrderProductPartStatement = connection.prepareStatement(insertOrderProductPart);
                    insertOrderProductPartStatement.setInt(1, newOrderCarportId);
                    insertOrderProductPartStatement.setInt(2, orderProductPart.getProductPart().getId());
                    insertOrderProductPartStatement.setInt(3, orderProductPart.getQuantity());
                    insertOrderProductPartStatement.setFloat(4, orderProductPart.getPrice());
                    insertOrderProductPartStatement.execute();
                }
            }
            
            // At this point everything has worked properly so we commit the transaction
            connection.commit();
        }catch (SQLException ex){
            // in case of an error, rollback our changes so that the order isn't realized.
            connection.rollback();
            DataAccessObject.releaseConnection(connection);
            throw ex;
        }
        
        DataAccessObject.releaseConnection(connection);
    }
}